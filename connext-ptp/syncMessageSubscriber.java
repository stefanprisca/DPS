

/* syncMessageSubscriber.java

A publication of data of type syncMessage

This file is derived from code automatically generated by the rtiddsgen
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type syncMessage automatically generated by
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java syncMessageSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java syncMessagePublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and
multicast receive addresses via an environment variable or a file
(in the current working directory) called NDDS_DISCOVERY_PEERS.

You can run any number of publishers and subscribers programs, and can
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.

On UNIX systems:
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class syncMessagePublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class syncMessageSubscriber <domain_id>
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.ArrayList;
import java.time.Clock;
import java.time.Duration;
import java.time.LocalDate;
import java.lang.Math;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class syncMessageSubscriber {

    private static myTimer timer = new myTimer(100);

    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private syncMessageSubscriber() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        syncMessageDataReader reader = null;

        try {

            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
            create_participant(
                domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = syncMessageTypeSupport.get_type_name();
            syncMessageTypeSupport.register_type(participant, typeName);

            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            topic = participant.create_topic(
                "Example syncMessage",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }

            // --- Create reader --- //

            listener = setupListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            reader = (syncMessageDataReader)
            subscriber.create_datareader(
                topic, Subscriber.DATAREADER_QOS_DEFAULT, listener,
                StatusKind.STATUS_MASK_ALL);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }

            // --- Wait for data --- //

            final long receivePeriodMillis = 10;

            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {

                try {
                    // syncMessageSubscriber.clock = Clock.offset(clock, offset);
                    // syncMessageSubscriber.offset = offset.plusMillis(1);
                    Thread.sleep(receivePeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // @ASSIGNMENT HERE ----
    private static syncMessageListener setupListener() {
      syncMessageListener listener = new syncMessageListener();

      listener.addObserver(syncMessageSubscriber.sync_clock);

      return listener;
    }

    private static SyncComputer syncComp = new SyncComputer();
    private static IMessageObserver sync_clock = (syncMessage message)-> {
      long slaveClock = timer.getClock();
      syncComp.pushSlaveClock(slaveClock);

      long masterClock = Long.valueOf(message.value).longValue();
      syncComp.pushMasterClock(masterClock);
      System.out.println("Pushed clocks  " + (masterClock) + " <> " + (slaveClock));

      long syncTo = syncComp.computeSyncDiff();
      if (syncTo != 0){
        int  rand = (int)(Math.random() * 2);
        timer.setDelay((int)syncTo + rand);
      }
    };

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class syncMessageListener extends DataReaderAdapter {

        syncMessageSeq _dataSeq = new syncMessageSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        private ArrayList<IMessageObserver> observers = new ArrayList<IMessageObserver>();

        public void addObserver(IMessageObserver obs){
          this.observers.add(obs);
        }

        public void on_data_available(DataReader reader) {
            syncMessageDataReader syncMessageReader =
            (syncMessageDataReader)reader;

            try {
                syncMessageReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                      syncMessage msg = ((syncMessage)_dataSeq.get(i));
                        // System.out.println(
                        //     msg.toString("Received",0));
                      for (IMessageObserver obs : observers){
                        obs.react(msg);
                      }
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                syncMessageReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }

    private static interface IMessageObserver{
      void react(syncMessage message);
    }

    private static class SyncComputer {
      private long tM1, tM2;
      private long tS1, tS2;

      public SyncComputer(){
        tM1 = tM2 = 0;
        tS1 = tS2 = 0;
      }

      void pushMasterClock(long val){
        tM1 = tM2;
        tM2 = val;
      }

      void pushSlaveClock(long val){
        tS1 = tS2;
        tS2 = val;
      }

      long computeSyncDiff(){
        if(tM1 == 0  || tS1 == 0){
          return 0;
        }

        long masterDiff = tM2 - tM1;
        long slaveDiff = tS2 -tS1;
        if (masterDiff != slaveDiff){
          System.out.println("Found difference between master cycles and slave cycles." + masterDiff + " vs " + slaveDiff);
          int pub_period = syncMessagePublisher.PUBLISH_PERIOD_MS;
          return pub_period/masterDiff;
        }

        long sMDiff1 = tS1 - tM1;
        long sMDiff2 = tS2 - tM2;
        if (sMDiff1 != sMDiff2){
          System.out.println("Found difference between cycle 1 and cycle 2.");
          return sMDiff2 - sMDiff1;
        }
        return 0;
      }
    }


}
